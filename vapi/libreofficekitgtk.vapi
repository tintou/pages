/* libreofficekitgtk.vapi generated by vapigen, do not modify. */

[CCode (cprefix = "LOKDoc", gir_namespace = "LOKDocView", gir_version = "0.1", lower_case_cprefix = "lok_doc_")]
namespace LOKDoc {
	[CCode (cheader_filename = "LibreOfficeKit/LibreOfficeKitGtk.h", type_id = "lok_doc_view_get_type ()")]
	public class View : Gtk.DrawingArea, Atk.Implementor, GLib.Initable, Gtk.Buildable {
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public View (string? pPath, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string copy_selection (string pMimeType, out string pUsedMimeType);
		public void find_next (string pText, bool bHighlightAll);
		public void find_prev (string pText, bool bHighlightAll);
		[CCode (has_construct_function = false, type = "GtkWidget*")]
		public View.from_user_profile (string? pPath, string? pUserProfile, GLib.Cancellable? cancellable = null) throws GLib.Error;
		public string get_command_values (string pCommand);
		public bool get_edit ();
		public int get_part ();
		public string get_part_name (int nPart);
		public int get_parts ();
		public string get_version_info ();
		public float get_zoom ();
		public void highlight_all (string pText);
		public unowned Gtk.Widget new_from_widget (string? pRenderingArguments);
		public async bool open_document (owned string pPath, string? pRenderingArguments, GLib.Cancellable? cancellable) throws GLib.Error;
		public bool paste (string pMimeType, string pData, size_t nSize);
		public float pixel_to_twip (float fInput);
		public void post_command (string pCommand, string pArguments, bool bNotifyWhenFinished);
		public void reset_view ();
		public void set_document_password (string pURL, string? pPassword);
		public void set_edit (bool bEdit);
		public void set_part (int nPart);
		public void set_partmode (int nPartMode);
		public void set_visible_area (Gdk.Rectangle pVisibleArea);
		public void set_zoom (float fZoom);
		public float twip_to_pixel (float fInput);
		[NoAccessorMethod]
		public bool can_zoom_in { get; }
		[NoAccessorMethod]
		public bool can_zoom_out { get; }
		[NoAccessorMethod]
		public long doc_height { get; set; }
		[NoAccessorMethod]
		public bool doc_password { get; set; }
		[NoAccessorMethod]
		public bool doc_password_to_modify { get; set; }
		[NoAccessorMethod]
		public long doc_width { get; set; }
		[NoAccessorMethod]
		public string docpath { owned get; set; }
		[NoAccessorMethod]
		public void* docpointer { get; set; }
		[NoAccessorMethod]
		public bool editable { get; set; }
		[NoAccessorMethod]
		public bool is_initialized { get; }
		[NoAccessorMethod]
		public bool is_loading { get; }
		[NoAccessorMethod]
		public double load_progress { get; }
		[NoAccessorMethod]
		public string lopath { owned get; construct; }
		[NoAccessorMethod]
		public void* lopointer { get; construct; }
		[NoAccessorMethod]
		public bool tiled_annotations { get; set; }
		[NoAccessorMethod]
		public bool unipoll { get; construct; }
		[NoAccessorMethod]
		public string userprofileurl { owned get; construct; }
		[NoAccessorMethod]
		public float zoom_level { get; set; }
		public signal void address_changed (string aCommand);
		public signal void command_changed (string aCommand);
		public signal void command_result (string aCommand);
		public signal void comment (string pComment);
		public signal void cursor_changed (int nX, int nY, int nWidth, int nHeight);
		public signal void edit_changed (bool bEdit);
		public signal void formula_changed (string aCommand);
		public signal void hyperlink_clicked (string object);
		public signal void invalidate_header (string pPayload);
		public signal void load_changed (double fLoadProgress);
		public signal void part_changed (int aCommand);
		public signal void password_required (string pUrl, bool bModify);
		public signal void ruler (string pPayload);
		public signal void search_not_found (string aCommand);
		public signal void search_result_count (string aCommand);
		public signal void size_changed (int aCommand);
		public signal void text_selection (bool bIsTextSelected);
		public signal void window (string pPayload);
	}
}
